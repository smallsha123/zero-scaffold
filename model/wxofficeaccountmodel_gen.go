// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	wxOfficeAccountFieldNames          = builder.RawFieldNames(&WxOfficeAccount{})
	wxOfficeAccountRows                = strings.Join(wxOfficeAccountFieldNames, ",")
	wxOfficeAccountRowsExpectAutoSet   = strings.Join(stringx.Remove(wxOfficeAccountFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	wxOfficeAccountRowsWithPlaceHolder = strings.Join(stringx.Remove(wxOfficeAccountFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheWxOfficeAccountIdPrefix = "cache:wxOfficeAccount:id:"
)

type (
	wxOfficeAccountModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *WxOfficeAccount) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*WxOfficeAccount, error)
		Update(ctx context.Context, session sqlx.Session, newData *WxOfficeAccount) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultWxOfficeAccountModel struct {
		sqlc.CachedConn
		table string
	}

	WxOfficeAccount struct {
		Id               int64          `db:"id"`
		Classify         int64          `db:"classify"`   // 授权资质类型：1=服务商模式，2=个人模式
		Department       int64          `db:"department"` // 客服部门
		TypeApp          int64          `db:"type_app"`   // 1.微信公众号2.小程序
		IsUsed           int64          `db:"is_used"`    // 1.可用2.不可用
		Gid              int64          `db:"gid"`        // 微信分组ID
		Appid            string         `db:"appid"`      // appid
		Platform         int64          `db:"platform"`   // 服务商ID
		RefreshToken     string         `db:"refresh_token"`
		Name             string         `db:"name"`          // 昵称
		HeadImg          string         `db:"head_img"`      // 头像
		Original         string         `db:"original"`      // 第三方授权的名称
		ComMainBody      string         `db:"com_main_body"` // 主体名称
		Alias            sql.NullString `db:"alias"`         // 微信号
		Headimg          sql.NullString `db:"headimg"`       // 二微码
		Status           int64          `db:"status"`        // 1.正常2.取消
		Level            string         `db:"level"`
		Type             int64          `db:"type"` // 公众号等级（订阅，是否认证）
		Token            string         `db:"token"`
		Encodingaeskey   string         `db:"encodingaeskey"`
		AccountId        int64          `db:"account_id"`
		CreateTime       int64          `db:"create_time"`
		UpdateTime       int64          `db:"update_time"`
		FuncInfo         sql.NullString `db:"func_info"`          // 权限集列表
		Release          int64          `db:"release"`            // 发布版本的次数
		Version          string         `db:"version"`            // 小程序版本号
		AuditStatus      int64          `db:"audit_status"`       // 0审核成功，1.审核被拒绝2.审核中，3.已撤回
		IsFrozen         int64          `db:"is_frozen"`          // 1不冻结 2 冻结了
		AuditTime        sql.NullString `db:"audit_time"`         // 审核shi jain
		DomainStatus     int64          `db:"domain_status"`      // 0.未添加1.添加
		DailyLimit       int64          `db:"daily_limit"`        // 当日最大生成链接数
		Used             int64          `db:"used"`               // 当已经使用链接数
		Remain           int64          `db:"remain"`             // 当日剩余链接数
		RemainTime       int64          `db:"remain_time"`        // 小程序链接没有可用测试的时间
		DelectStatus     int64          `db:"delect_status"`      // 是否删除1正常2删除
		ProductIds       string         `db:"product_ids"`        // 小程序匹配商品
		H5Ids            sql.NullString `db:"h5_ids"`             // 小程序匹配H5
		CustomerPhone    sql.NullString `db:"customer_phone"`     // 客服名称
		CustomerImg      sql.NullString `db:"customer_img"`       // 客服头像
		ShopStyle        int64          `db:"shop_style"`         // 1.枫叶小店样式2.淘积木样式
		PayPriTmplId     sql.NullString `db:"pay_priTmplId"`      // 订阅支付模版参数
		HomeStyleType    sql.NullString `db:"home_style_type"`    // 小程序首页风格类型：1、2、3
		WaitPayPriTmplId sql.NullString `db:"wait_pay_priTmplId"` // 订阅待支付模板参数
		ExpressPriTmplId sql.NullString `db:"express_priTmplId"`  // 订阅发货模板参数
		CustomerStatus   int64          `db:"customer_status"`    // 1.开启2.关闭
		TraceExpress     int64          `db:"trace_express"`      // 物流组件1.开启2.关闭
		AfterSalesDays   int64          `db:"after_sales_days"`   // 售后服务天数默认15天
		UploadCode       string         `db:"upload_code"`        // 私有化
	}
)

func newWxOfficeAccountModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultWxOfficeAccountModel {
	return &defaultWxOfficeAccountModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`wx_office_account`",
	}
}

func (m *defaultWxOfficeAccountModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	wxOfficeAccountIdKey := fmt.Sprintf("%s%v", cacheWxOfficeAccountIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		if session != nil {
			return session.ExecCtx(ctx, query, id)
		}
		return conn.ExecCtx(ctx, query, id)
	}, wxOfficeAccountIdKey)
	return err
}

func (m *defaultWxOfficeAccountModel) FindOne(ctx context.Context, id int64) (*WxOfficeAccount, error) {
	wxOfficeAccountIdKey := fmt.Sprintf("%s%v", cacheWxOfficeAccountIdPrefix, id)
	var resp WxOfficeAccount
	err := m.QueryRowCtx(ctx, &resp, wxOfficeAccountIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wxOfficeAccountRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultWxOfficeAccountModel) Insert(ctx context.Context, session sqlx.Session, data *WxOfficeAccount) (sql.Result, error) {
	wxOfficeAccountIdKey := fmt.Sprintf("%s%v", cacheWxOfficeAccountIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, wxOfficeAccountRowsExpectAutoSet)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Classify, data.Department, data.TypeApp, data.IsUsed, data.Gid, data.Appid, data.Platform, data.RefreshToken, data.Name, data.HeadImg, data.Original, data.ComMainBody, data.Alias, data.Headimg, data.Status, data.Level, data.Type, data.Token, data.Encodingaeskey, data.AccountId, data.FuncInfo, data.Release, data.Version, data.AuditStatus, data.IsFrozen, data.AuditTime, data.DomainStatus, data.DailyLimit, data.Used, data.Remain, data.RemainTime, data.DelectStatus, data.ProductIds, data.H5Ids, data.CustomerPhone, data.CustomerImg, data.ShopStyle, data.PayPriTmplId, data.HomeStyleType, data.WaitPayPriTmplId, data.ExpressPriTmplId, data.CustomerStatus, data.TraceExpress, data.AfterSalesDays, data.UploadCode)
		}
		return conn.ExecCtx(ctx, query, data.Classify, data.Department, data.TypeApp, data.IsUsed, data.Gid, data.Appid, data.Platform, data.RefreshToken, data.Name, data.HeadImg, data.Original, data.ComMainBody, data.Alias, data.Headimg, data.Status, data.Level, data.Type, data.Token, data.Encodingaeskey, data.AccountId, data.FuncInfo, data.Release, data.Version, data.AuditStatus, data.IsFrozen, data.AuditTime, data.DomainStatus, data.DailyLimit, data.Used, data.Remain, data.RemainTime, data.DelectStatus, data.ProductIds, data.H5Ids, data.CustomerPhone, data.CustomerImg, data.ShopStyle, data.PayPriTmplId, data.HomeStyleType, data.WaitPayPriTmplId, data.ExpressPriTmplId, data.CustomerStatus, data.TraceExpress, data.AfterSalesDays, data.UploadCode)
	}, wxOfficeAccountIdKey)
	return ret, err
}

func (m *defaultWxOfficeAccountModel) Update(ctx context.Context, session sqlx.Session, data *WxOfficeAccount) error {
	wxOfficeAccountIdKey := fmt.Sprintf("%s%v", cacheWxOfficeAccountIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, wxOfficeAccountRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Classify, data.Department, data.TypeApp, data.IsUsed, data.Gid, data.Appid, data.Platform, data.RefreshToken, data.Name, data.HeadImg, data.Original, data.ComMainBody, data.Alias, data.Headimg, data.Status, data.Level, data.Type, data.Token, data.Encodingaeskey, data.AccountId, data.FuncInfo, data.Release, data.Version, data.AuditStatus, data.IsFrozen, data.AuditTime, data.DomainStatus, data.DailyLimit, data.Used, data.Remain, data.RemainTime, data.DelectStatus, data.ProductIds, data.H5Ids, data.CustomerPhone, data.CustomerImg, data.ShopStyle, data.PayPriTmplId, data.HomeStyleType, data.WaitPayPriTmplId, data.ExpressPriTmplId, data.CustomerStatus, data.TraceExpress, data.AfterSalesDays, data.UploadCode, data.Id)
		}
		return conn.ExecCtx(ctx, query, data.Classify, data.Department, data.TypeApp, data.IsUsed, data.Gid, data.Appid, data.Platform, data.RefreshToken, data.Name, data.HeadImg, data.Original, data.ComMainBody, data.Alias, data.Headimg, data.Status, data.Level, data.Type, data.Token, data.Encodingaeskey, data.AccountId, data.FuncInfo, data.Release, data.Version, data.AuditStatus, data.IsFrozen, data.AuditTime, data.DomainStatus, data.DailyLimit, data.Used, data.Remain, data.RemainTime, data.DelectStatus, data.ProductIds, data.H5Ids, data.CustomerPhone, data.CustomerImg, data.ShopStyle, data.PayPriTmplId, data.HomeStyleType, data.WaitPayPriTmplId, data.ExpressPriTmplId, data.CustomerStatus, data.TraceExpress, data.AfterSalesDays, data.UploadCode, data.Id)
	}, wxOfficeAccountIdKey)
	return err
}

func (m *defaultWxOfficeAccountModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheWxOfficeAccountIdPrefix, primary)
}

func (m *defaultWxOfficeAccountModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", wxOfficeAccountRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultWxOfficeAccountModel) tableName() string {
	return m.table
}
